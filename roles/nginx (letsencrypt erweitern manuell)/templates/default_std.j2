# {{ ansible_managed }}

{% if unit_type == 'gateway' %}

###########################################
################################## Gateways
###########################################
server {
	listen 80 default_server;
	server_name {{ unit_id }}.gw.{{ sites[gateways[unit_id].site].domain }};
	include snippets/letsencrypt.conf;
	return 301 https://$host$request_uri;
}


server {
	listen 443 ssl http2;
	server_name {{ unit_id }}.{{ sites[gateways[unit_id].site].domain }};

	ssl_certificate /etc/letsencrypt/live/{{ unit_id }}.gw.{{ sites[gateways[unit_id].site].domain }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ unit_id }}.gw.{{ sites[gateways[unit_id].site].domain }}/privkey.pem;
	ssl_trusted_certificate /etc/letsencrypt/live/{{ unit_id }}.gw.{{ sites[gateways[unit_id].site].domain }}/chain.pem;
	include snippets/ssl.conf;
	include snippets/letsencrypt.conf;

	location / {
		root /var/www/html/yanic/;
		autoindex on;
                include snippets/cors.conf;
		try_files $uri $uri/ =404;
	}

	location /yanic {
		autoindex on;
		root /var/www/html/yanic/;
                include snippets/cors.conf;
		try_files $uri $uri/ =404;
	}
}

{% elif unit_type == 'mapserver' %}

#############################################
################################## Map-Server
#############################################

server {
	listen [::]:80 default_server;
	server_name {{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}{% if gateways[unit_id].aliases is defined %}{% for ali in gateways[unit_id].aliases %} {{ali}}{% endfor %}{% endif %};
	include snippets/letsencrypt.conf;
	return 301 https://$host$request_uri;
}

server {
	listen 443 ssl http2;
	server_name {{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}{% if gateways[unit_id].aliases is defined %}{% for ali in gateways[unit_id].aliases %} {{ali}}{% endfor %}{% endif %};

	ssl_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/privkey.pem;
	ssl_trusted_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/chain.pem;
	include snippets/ssl.conf;
	include snippets/letsencrypt.conf;

	location / {
		root /var/www/html/meshviewer/build/;
                include snippets/cors.conf;
		try_files $uri $uri/ =404;
	}

	location /data {
		autoindex on;
		alias /var/www/html/meshviewer/data/;
                include snippets/cors.conf;
		try_files $uri $uri/ =404;
	}
}

{% elif unit_type == 'collector' %}

############################################
################################## Collector
############################################

server {
        listen 80 default_server;
        server_name firmware.{{sites[gateways[unit_id].site].domain }}
                    firmware1.{{sites[gateways[unit_id].site].domain }}
                    firmware2.{{sites[gateways[unit_id].site].domain }};
        include snippets/letsencrypt.conf;
        return 301 https://$host$request_uri;
}

server {
        listen [::]:80 default_server;
        server_name _;

        location /firmware {
                autoindex on;
                alias /home/freifunker/firmware/;
                try_files $uri $uri/ =404;
        }

        location / {
                include snippets/letsencrypt.conf;
                return 301 https://$host$request_uri;
        }
}

server {
        listen 443 ssl http2;
        server_name firmware.{{ sites[gateways[unit_id].site].domain }}
                    firmware1.{{ sites[gateways[unit_id].site].domain }}
                    firmware2.{{ sites[gateways[unit_id].site].domain }};

	ssl_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/privkey.pem;
	ssl_trusted_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/chain.pem;
        include snippets/ssl.conf;
        include snippets/letsencrypt.conf;

        location / {
                alias /home/freifunker/firmware/;
                include snippets/cors.conf;
                try_files $uri $uri/ =404;
        }

}

server {
        listen 443 ssl http2;
        server_name {{ unit_id }}.{{ sites[gateways[unit_id].site].domain }};
        ssl_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/chain.pem;
        include snippets/ssl.conf;
        include snippets/letsencrypt.conf;

        location / {
                autoindex on;
                root /var/www/html/yanic/;
                include snippets/cors.conf;
                try_files $uri $uri/ =404;
        }
}


{% elif unit_type == 'statserver' %}

##############################################
################################## Stat-server
##############################################

server {
        listen [::]:80 default_server;
        server_name {{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}{% if gateways[unit_id].aliases is defined %}{% for ali in gateways[unit_id].aliases %} {{ali}}{% endfor %}{% endif %};
        include snippets/letsencrypt.conf;
        return 301 https://$host$request_uri;
}

server {
        listen 443 ssl http2;
	server_name {{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}{% if gateways[unit_id].aliases is defined %}{% for ali in gateways[unit_id].aliases %} {{ali}}{% endfor %}{% endif %};

	ssl_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/privkey.pem;
	ssl_trusted_certificate /etc/letsencrypt/live/{{ unit_id }}.{{ sites[gateways[unit_id].site].domain }}/chain.pem;
        include snippets/ssl.conf;
        include snippets/letsencrypt.conf;

        location /influxdb {
                proxy_pass http://localhost:8086;
                rewrite ^/influxdb/(.*) /$1 break;
                proxy_set_header Host $host;
        }

        location / {
                proxy_pass http://localhost:3000$request_uri;
        }
}

{% endif %}


############################################################################


