---

#- name: Stop a running yanic service
#  service:
#    name:               yanic@{{ hoods[item.key].sname }}.service
#    state:              stopped
#  loop:                 "{{ gateways[unit_id].domains | dict2items }}"
#  ignore_errors:        True

- name: Create user
  user: 
    name:               yanic
    create_home:        no

- name: Install yanic
  shell:                /usr/local/go/bin/go install {{ yanic_source }}
  args:
    creates:            /opt/go/bin/yanic
  environment:
    GOPRIVATE:          github.com/FreifunkBremen/yanic
    GOPATH:             /opt/go
#  environment:
#    GOPATH:             /opt/go
  notify:               Restart yanic
  ignore_errors:        true

- name: Configure yanic
  template: 
    src:                yanic.conf.j2
    dest:               /etc/yanic_{{ hoods[item.key].sname }}.conf
  loop:                 "{{ gateways[unit_id].domains | dict2items }}"
  notify:               Restart yanic

- name: Create directories
  file:                 
    path:               "/var/www/html/yanic/{{ hoods[item.key].sname }}/" 
    state:              directory
    owner:              yanic
  loop:                 "{{ gateways[unit_id].domains | dict2items }}" 

- name: Create directories
  file:                 
    path:               "/var/lib/yanic/{{ hoods[item.key].sname }}/" 
    state:              directory
    owner:              yanic
  loop:                 "{{ gateways[unit_id].domains | dict2items }}"

- name: Install systemd unit
  template: 
    src:                yanic.service.j2 
    dest:               /lib/systemd/system/yanic@{{ hoods[item.key].sname }}.service
  loop:                 "{{ gateways[unit_id].domains | dict2items }}"
  notify:
  - Reload systemd
  - Restart yanic

- name: Enable yanic
  service:              
    name:               yanic@{{ hoods[item.key].sname }}.service 
    enabled:            yes
  loop:                 "{{ gateways[unit_id].domains | dict2items }}"

...
